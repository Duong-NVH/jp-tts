{"version":3,"sources":["App.js","index.js"],"names":["useStyles","makeStyles","app","height","textAlign","margin","content","display","flexDirection","justifyContent","App","useState","text","setText","isLoading","setIsLoading","audioBuffer","setAudioBuffer","classes","onRequest","a","length","API","axios","post","res","data","audioContent","alert","onPlay","ctx","AudioContext","Int8Array","from","decodeAudioData","buffer","audio","playSound","createBufferSource","connect","destination","start","currentTime","Box","className","Typography","variant","style","fontSize","Container","maxWidth","TextField","id","label","multiline","rows","value","onChange","e","target","fullWidth","Button","color","startIcon","CircularProgress","size","onClick","disabled","mp3encoder","lamejs","Mp3Encoder","mp3Data","sampleBlockSize","Int16Array","i","leftChunk","subarray","rightChunk","mp3buf","encodeBuffer","push","flush","blob","Blob","type","url","window","URL","createObjectURL","tempLink","document","createElement","href","setAttribute","click","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.652cab56.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Box,\n  Typography,\n  Container,\n  TextField,\n  Button,\n  makeStyles,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport VolumeUpIcon from \"@material-ui/icons/VolumeUp\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport axios from \"axios\";\nimport lamejs from \"lamejs\";\n\nconst App = () => {\n  const [text, setText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [audioBuffer, setAudioBuffer] = useState();\n  const classes = useStyles();\n  const onChangeText = (e) => {\n    if (audioBuffer) {\n      setAudioBuffer(null);\n    }\n    setText(e.target.value);\n  };\n  const onRequest = async () => {\n    if (text.length > 0) {\n      const API = `https://cors-anywhere.herokuapp.com/us-central1-spontane.cloudfunctions.net/txttospeech?text=${text}&languageCode=ja-JP&voiceCode=ja-JP-Standard-A`;\n      setIsLoading(true);\n      try {\n        const res = await axios.post(API);\n        if (res.data.audioContent.data) {\n          setAudioBuffer(res.data.audioContent.data);\n        } else {\n          alert(\"?\");\n        }\n      } catch (error) {\n        alert(error);\n      }\n      setIsLoading(false);\n    }\n  };\n  const onPlay = async () => {\n    const ctx = new AudioContext();\n    const data = new Int8Array(Int8Array.from(audioBuffer));\n    const audio = await ctx.decodeAudioData(data.buffer);\n    const playSound = ctx.createBufferSource();\n    playSound.buffer = audio;\n    playSound.connect(ctx.destination);\n    playSound.start(ctx.currentTime);\n  };\n  const onDownload = () => {\n    const channels = 2; //1 for mono or 2 for stereo\n    const sampleRate = 44100; //44.1khz (normal mp3 samplerate)\n    const kbps = 128; //encode 128kbps mp3\n    const mp3encoder = new lamejs.Mp3Encoder(channels, sampleRate, kbps);\n    let mp3Data = [];\n    const sampleBlockSize = 1152;\n\n    const data = new Int16Array(Int16Array.from(audioBuffer));\n\n    for (var i = 0; i < data.length; i += sampleBlockSize) {\n      let leftChunk = data.subarray(i, i + sampleBlockSize);\n      let rightChunk = data.subarray(i, i + sampleBlockSize);\n      var mp3buf = mp3encoder.encodeBuffer(leftChunk, rightChunk);\n      if (mp3buf.length > 0) {\n        mp3Data.push(mp3buf);\n      }\n    }\n    mp3buf = mp3encoder.flush(); //finish writing mp3\n\n    if (mp3buf.length > 0) {\n      mp3Data.push(new Int8Array(mp3buf));\n    }\n    let blob = new Blob(mp3Data, { type: \"audio/mp3\" });\n    let url = window.URL.createObjectURL(blob);\n    let tempLink = document.createElement(\"a\");\n    tempLink.href = url;\n    tempLink.setAttribute(\"download\", \"audio.mp3\");\n    tempLink.click();\n  };\n\n  return (\n    <Box className={classes.app}>\n      <Typography variant=\"h1\">\n        JP-TTS V1 <VolumeUpIcon style={{ fontSize: 60 }} />\n      </Typography>\n      <Container maxWidth=\"sm\" className={classes.content}>\n        <TextField\n          id=\"standard-multiline-flexible\"\n          label=\"Enter text\"\n          multiline\n          variant=\"outlined\"\n          rows={8}\n          value={text}\n          onChange={onChangeText}\n          fullWidth\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={\n            isLoading ? (\n              <CircularProgress color=\"secondary\" size={20} />\n            ) : (\n              <SendIcon />\n            )\n          }\n          size=\"large\"\n          onClick={onRequest}\n          disabled={isLoading}\n        >\n          {isLoading ? \"Processing\" : \"Convert to speech\"}\n        </Button>\n      </Container>\n      {audioBuffer && (\n        <Box>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            startIcon={<GetAppIcon />}\n            onClick={onDownload}\n          >\n            {\"Get mp3\"}\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"large\"\n            startIcon={<MicIcon />}\n            onClick={onPlay}\n          >\n            {\"Play\"}\n          </Button>\n        </Box>\n      )}\n    </Box>\n  );\n};\nconst useStyles = makeStyles({\n  app: {\n    height: \"100%\",\n    textAlign: \"center\",\n    \"&>:first-child\": {\n      margin: 20,\n    },\n    \"&>:nth-child(3)\": {\n      margin: 20,\n      \"&>*\": {\n        margin: \"0 5px 0px 5px\",\n      },\n    },\n  },\n  content: {\n    height: 250,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-around\",\n  },\n});\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}