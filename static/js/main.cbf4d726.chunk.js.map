{"version":3,"sources":["App.js","index.js"],"names":["useStyles","makeStyles","app","height","textAlign","margin","content","display","flexDirection","justifyContent","App","useState","text","setText","isLoading","setIsLoading","audioBuffer","setAudioBuffer","classes","onRequest","a","length","API","axios","post","res","data","audioContent","alert","onPlay","ctx","AudioContext","Int8Array","from","decodeAudioData","buffer","audio","playSound","createBufferSource","connect","destination","start","currentTime","onDownload","wav","toWav","blob","Blob","DataView","type","url","window","URL","createObjectURL","tempLink","document","createElement","href","setAttribute","click","Box","className","Typography","variant","style","fontSize","Container","maxWidth","TextField","id","label","multiline","rows","value","onChange","e","target","fullWidth","Button","color","startIcon","CircularProgress","size","onClick","disabled","ReactDOM","render","getElementById"],"mappings":"sWA+HMA,EAAYC,YAAW,CAC3BC,IAAK,CACHC,OAAQ,OACRC,UAAW,SACX,iBAAkB,CAChBC,OAAQ,IAEV,kBAAmB,CACjBA,OAAQ,GACR,MAAO,CACLA,OAAQ,mBAIdC,QAAS,CACPH,OAAQ,IACRI,QAAS,OACTC,cAAe,SACfC,eAAgB,kBAGLC,EAnIH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACTC,EADS,KACHC,EADG,OAEkBF,oBAAS,GAF3B,mBAETG,EAFS,KAEEC,EAFF,OAGsBJ,qBAHtB,mBAGTK,EAHS,KAGIC,EAHJ,KAIVC,EAAUlB,IAOVmB,EAAS,uCAAG,8BAAAC,EAAA,2DACZR,EAAKS,OAAS,GADF,wBAERC,EAFQ,2EAEkEV,EAFlE,kDAGdG,GAAa,GAHC,kBAKMQ,IAAMC,KAAKF,GALjB,QAKNG,EALM,QAMJC,KAAKC,aAAaD,KACxBT,EAAeQ,EAAIC,KAAKC,aAAaD,MAErCE,MAAM,KATI,kDAYZA,MAAM,EAAD,IAZO,QAcdb,GAAa,GAdC,0DAAH,qDAiBTc,EAAM,uCAAG,kCAAAT,EAAA,6DACPU,EAAM,IAAIC,aACVL,EAAO,IAAIM,UAAUA,UAAUC,KAAKjB,IAF7B,SAGOc,EAAII,gBAAgBR,EAAKS,QAHhC,OAGPC,EAHO,QAIPC,EAAYP,EAAIQ,sBACZH,OAASC,EACnBC,EAAUE,QAAQT,EAAIU,aACtBH,EAAUI,MAAMX,EAAIY,aAPP,2CAAH,qDASNC,EAAU,uCAAG,wCAAAvB,EAAA,6DACXM,EAAO,IAAIM,UAAUA,UAAUC,KAAKjB,IACpCc,EAAM,IAAIC,aAFC,SAGGD,EAAII,gBAAgBR,EAAKS,QAH5B,OAGXC,EAHW,OAIbQ,EAAMC,IAAMT,GACZU,EAAO,IAAIC,KAAK,CAAC,IAAIC,SAASJ,IAAO,CACvCK,KAAM,cAEJC,EAAMC,OAAOC,IAAIC,gBAAgBP,IACjCQ,EAAWC,SAASC,cAAc,MAC7BC,KAAOP,EAChBI,EAASI,aAAa,WAAY,aAClCJ,EAASK,QAZQ,4CAAH,qDAehB,OACE,eAACC,EAAA,EAAD,CAAKC,UAAW3C,EAAQhB,IAAxB,UACE,eAAC4D,EAAA,EAAD,CAAYC,QAAQ,KAApB,uBACY,cAAC,IAAD,CAAcC,MAAO,CAAEC,SAAU,SAE7C,eAACC,EAAA,EAAD,CAAWC,SAAS,KAAKN,UAAW3C,EAAQZ,QAA5C,UACE,cAAC8D,EAAA,EAAD,CACEC,GAAG,8BACHC,MAAM,aACNC,WAAS,EACTR,QAAQ,WACRS,KAAM,EACNC,MAAO7D,EACP8D,SA5Da,SAACC,GAChB3D,GACFC,EAAe,MAEjBJ,EAAQ8D,EAAEC,OAAOH,QAyDXI,WAAS,IAEX,cAACC,EAAA,EAAD,CACEf,QAAQ,YACRgB,MAAM,UACNC,UACElE,EACE,cAACmE,EAAA,EAAD,CAAkBF,MAAM,YAAYG,KAAM,KAE1C,cAAC,IAAD,IAGJA,KAAK,QACLC,QAAShE,EACTiE,SAAUtE,EAZZ,SAcGA,EAAY,aAAe,yBAG/BE,GACC,eAAC4C,EAAA,EAAD,WACE,cAACkB,EAAA,EAAD,CACEf,QAAQ,YACRgB,MAAM,UACNG,KAAK,QACLF,UAAW,cAAC,IAAD,IACXG,QAASxC,EALX,SAOG,cAEH,cAACmC,EAAA,EAAD,CACEf,QAAQ,YACRgB,MAAM,YACNG,KAAK,QACLF,UAAW,cAAC,IAAD,IACXG,QAAStD,EALX,SAOG,gBCnHbwD,IAASC,OAAO,cAAC,EAAD,IAAS/B,SAASgC,eAAe,U","file":"static/js/main.cbf4d726.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Container,\r\n  TextField,\r\n  Button,\r\n  makeStyles,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport VolumeUpIcon from \"@material-ui/icons/VolumeUp\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport axios from \"axios\";\r\nimport toWav from \"audiobuffer-to-wav\";\r\n\r\nconst App = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [audioBuffer, setAudioBuffer] = useState();\r\n  const classes = useStyles();\r\n  const onChangeText = (e) => {\r\n    if (audioBuffer) {\r\n      setAudioBuffer(null);\r\n    }\r\n    setText(e.target.value);\r\n  };\r\n  const onRequest = async () => {\r\n    if (text.length > 0) {\r\n      const API = `https://us-central1-spontane.cloudfunctions.net/txttospeech?text=${text}&languageCode=ja-JP&voiceCode=ja-JP-Standard-A`;\r\n      setIsLoading(true);\r\n      try {\r\n        const res = await axios.post(API);\r\n        if (res.data.audioContent.data) {\r\n          setAudioBuffer(res.data.audioContent.data);\r\n        } else {\r\n          alert(\"?\");\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  const onPlay = async () => {\r\n    const ctx = new AudioContext();\r\n    const data = new Int8Array(Int8Array.from(audioBuffer));\r\n    const audio = await ctx.decodeAudioData(data.buffer);\r\n    const playSound = ctx.createBufferSource();\r\n    playSound.buffer = audio;\r\n    playSound.connect(ctx.destination);\r\n    playSound.start(ctx.currentTime);\r\n  };\r\n  const onDownload = async () => {\r\n    const data = new Int8Array(Int8Array.from(audioBuffer));\r\n    const ctx = new AudioContext();\r\n    const audio = await ctx.decodeAudioData(data.buffer);\r\n    var wav = toWav(audio);\r\n    let blob = new Blob([new DataView(wav)], {\r\n      type: \"audio/wav\",\r\n    });\r\n    let url = window.URL.createObjectURL(blob);\r\n    let tempLink = document.createElement(\"a\");\r\n    tempLink.href = url;\r\n    tempLink.setAttribute(\"download\", \"audio.wav\");\r\n    tempLink.click();\r\n  };\r\n\r\n  return (\r\n    <Box className={classes.app}>\r\n      <Typography variant=\"h1\">\r\n        JP-TTS V1 <VolumeUpIcon style={{ fontSize: 60 }} />\r\n      </Typography>\r\n      <Container maxWidth=\"sm\" className={classes.content}>\r\n        <TextField\r\n          id=\"standard-multiline-flexible\"\r\n          label=\"Enter text\"\r\n          multiline\r\n          variant=\"outlined\"\r\n          rows={8}\r\n          value={text}\r\n          onChange={onChangeText}\r\n          fullWidth\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          startIcon={\r\n            isLoading ? (\r\n              <CircularProgress color=\"secondary\" size={20} />\r\n            ) : (\r\n              <SendIcon />\r\n            )\r\n          }\r\n          size=\"large\"\r\n          onClick={onRequest}\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading ? \"Processing\" : \"Convert to speech\"}\r\n        </Button>\r\n      </Container>\r\n      {audioBuffer && (\r\n        <Box>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            startIcon={<GetAppIcon />}\r\n            onClick={onDownload}\r\n          >\r\n            {\"Get audio\"}\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            size=\"large\"\r\n            startIcon={<MicIcon />}\r\n            onClick={onPlay}\r\n          >\r\n            {\"Play\"}\r\n          </Button>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\nconst useStyles = makeStyles({\r\n  app: {\r\n    height: \"100%\",\r\n    textAlign: \"center\",\r\n    \"&>:first-child\": {\r\n      margin: 20,\r\n    },\r\n    \"&>:nth-child(3)\": {\r\n      margin: 20,\r\n      \"&>*\": {\r\n        margin: \"0 5px 0px 5px\",\r\n      },\r\n    },\r\n  },\r\n  content: {\r\n    height: 250,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n});\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}